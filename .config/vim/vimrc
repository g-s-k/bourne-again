" builtin packages
packadd matchit
packadd editorconfig
packadd comment

" appearance
color slate
set number
set showcmd
set ttyfast

set showtabline=2

set cursorline
set cursorlineopt=number
set signcolumn=yes

" behavior
set hidden
set scrolloff=10
let mapleader=' '
set shortmess+=c
syntax enable
filetype indent plugin on

" search
set ignorecase
set smartcase
set nohlsearch

" command / find completion
set path+=**
set wildmenu
set wildignore+=*.o
set wildignore+=*.rlib

" tabs
set expandtab
set tabstop=2
set shiftwidth=2
set shiftround

" netrw file explorer
let g:netrw_fastbrowse = 0
let g:netrw_banner=0
let g:netrw_liststyle=3

" status line
set laststatus=2

set statusline=
set statusline+=%f
set statusline+=%m\ 
set statusline+=%= 
set statusline+=\ %l:%c
set statusline+=\ %p%%\ 

" system clipboard
noremap <silent> <Leader>y "+yy
noremap <silent> <Leader>p "+p
vnoremap <silent> <Leader>y "+y

" navigation
noremap <silent> <Leader>e :25Lex<CR>

noremap <silent> <Leader>t :tabnew<CR>
noremap <silent> <Leader>x :tabclose<CR>
noremap <silent> [t :tabprev<CR>
noremap <silent> ]t :tabnext<CR>

noremap <silent> [b :bprev<CR>
noremap <silent> ]b :bnext<CR>

noremap <silent> <Leader>q :cclose<CR>
noremap <silent> [q :cprev<CR>
noremap <silent> ]q :cnext<CR>

noremap <silent> <Leader>l :lclose<CR>
noremap <silent> [l :lprev<CR>
noremap <silent> ]l :lnext<CR>

" surround (basic)
vnoremap s( c(<C-r>")<ESC>
vnoremap s) c( <C-r>" )<ESC>
vnoremap s[ c[<C-r>"]<ESC>
vnoremap s] c[ <C-r>" ]<ESC>
vnoremap s{ c{<C-r>"}<ESC>
vnoremap s} c{ <C-r>" }<ESC>

" tmux
if empty($TMUX)
  command! NavigateLeft :wincmd h
  command! NavigateDown :wincmd j
  command! NavigateUp :wincmd k
  command! NavigateRight :wincmd l
else
  function! TryVimNavigate(direction)
    let nr = winnr()
    execute 'wincmd ' . a:direction
    if nr == winnr()
      let cmd = 'tmux select-pane -t ' . shellescape($TMUX_PANE) . ' -' . tr(a:direction, 'hjkl', 'LDUR')
      call system(cmd)
    endif
  endfunction

  command! NavigateLeft :call TryVimNavigate('h')
  command! NavigateDown :call TryVimNavigate('j')
  command! NavigateUp :call TryVimNavigate('k')
  command! NavigateRight :call TryVimNavigate('l')
endif

noremap <silent> <C-h> :NavigateLeft<CR>
noremap <silent> <C-j> :NavigateDown<CR>
noremap <silent> <C-k> :NavigateUp<CR>
noremap <silent> <C-l> :NavigateRight<CR>

" set ripgrep as grepprg
if executable("rg")
  set grepprg=rg\ --vimgrep\ --no-heading
  set grepformat=%f:%l:%c:%m,%f:%l:%m
endif

function! DoGlobalSearch()
  call inputsave()
  let l:search_term = shellescape(input('Global search: ', '', 'history'))
  call inputrestore()
  if empty(l:search_term)
    return
  endif
  silent execute "grep! " . l:search_term
  copen
endfunction

noremap <silent> <Leader>/ :call DoGlobalSearch()<CR>

" https://learnvimscriptthehardway.stevelosh.com/chapters/32.html
noremap <Leader>g :silent execute "grep! " . shellescape(expand("<cword>"))<CR>:copen<CR>
noremap <Leader>G :silent execute "grep! " . shellescape(expand("<cWORD>"))<CR>:copen<CR>

" fzf
if isdirectory('/opt/homebrew/opt/fzf')
	set rtp+=/opt/homebrew/opt/fzf

	command! FZFBuffers call fzf#run(fzf#wrap({
				\	'source': filter(map(
        \   getbufinfo({'buflisted': 1}),
        \   'v:val.name',
        \ ), '!empty(v:val)'),
				\	'sink': 'b',
				\ }))

	noremap <silent> <Leader>f :FZF<CR>
	noremap <silent> <Leader>b :FZFBuffers<CR>
endif

