" builtin packages
packadd matchit
packadd editorconfig
packadd comment

" appearance
color slate
set number
set showcmd
set ttyfast

set showtabline=2

set cursorline
set cursorlineopt=number
set signcolumn=yes

" behavior
set hidden
set scrolloff=10
let mapleader=' '
set shortmess+=c
syntax enable
filetype indent plugin on

" search
set ignorecase
set smartcase
set nohlsearch

" tabs
set expandtab
set tabstop=2
set shiftwidth=2
set shiftround

" netrw file explorer
let g:netrw_fastbrowse = 0
let g:netrw_banner=0
let g:netrw_liststyle=3

" status line
set laststatus=2

function! StatuslineGit()
	let l:branchname = system('git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d "\n"')
	return strlen(l:branchname) > 0?'  '.l:branchname.' ':''
endfunction

set statusline=
set statusline+=%#PmenuSel#
set statusline+=%{StatuslineGit()} 
set statusline+=%#LineNr#
set statusline+=\ %f
set statusline+=%m\ 
set statusline+=%= 
set statusline+=%#CursorColumn#
set statusline+=\ %y
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
set statusline+=\[%{&fileformat}\]
set statusline+=\ %p%%
set statusline+=\ %l:%c\ 

" system clipboard
noremap <silent> <Leader>y "+yy
noremap <silent> <Leader>p "+p
vnoremap <silent> <Leader>y "+y

" navigation
noremap <silent> <Leader>e :25Lex<CR>

noremap <silent> <Leader>t :tabnew<CR>
noremap <silent> <Leader>x :tabclose<CR>
noremap <silent> [t :tabprev<CR>
noremap <silent> ]t :tabnext<CR>

noremap <silent> [b :bprev<CR>
noremap <silent> ]b :bnext<CR>

noremap <silent> <Leader>h <C-w>h
noremap <silent> <Leader>j <C-w>j
noremap <silent> <Leader>k <C-w>k
noremap <silent> <Leader>l <C-w>l

" set ripgrep as grepprg
if executable("rg")
  set grepprg=rg\ --vimgrep\ --no-heading
  set grepformat=%f:%l:%c:%m,%f:%l:%m
endif

function! DoGlobalSearch()
  call inputsave()
  let l:search_term = shellescape(input('Global search: ', '', 'history'))
  call inputrestore()
  if empty(l:search_term)
    return
  endif
  silent execute "grep! " . l:search_term
  copen
endfunction

noremap <silent> <Leader>/ :call DoGlobalSearch()<CR>

" https://learnvimscriptthehardway.stevelosh.com/chapters/32.html
noremap <Leader>g :silent execute "grep! " . shellescape(expand("<cword>"))<CR>:copen<CR>
noremap <Leader>G :silent execute "grep! " . shellescape(expand("<cWORD>"))<CR>:copen<CR>

" fzf
if isdirectory('/opt/homebrew/opt/fzf')
	set rtp+=/opt/homebrew/opt/fzf

	command! FZFBuffers call fzf#run(fzf#wrap({
				\	'source': filter(map(
        \   getbufinfo({'buflisted': 1}),
        \   'v:val.name',
        \ ), '!empty(v:val)'),
				\	'sink': 'b',
				\ }))

	noremap <silent> <Leader>f :FZF<CR>
	noremap <silent> <Leader>b :FZFBuffers<CR>
endif

let s:lsp_plugin_dir = environ()['XDG_CONFIG_HOME'] . '/vim/pack/downloads/opt/lsp'
if isdirectory(s:lsp_plugin_dir)
	packadd lsp

  call LspOptionsSet(#{
        \ showDiagWithVirtualText: v:true,
        \ })

	call LspAddServer([#{
        \	name: 'clangd',
        \	filetype: ['c', 'cpp'],
        \	path: '/usr/bin/clangd',
        \	args: ['--background-index'],
        \ }])

	call LspAddServer([#{
        \	name: 'rust',
        \	filetype: ['rust'],
        \	path: '/Users/gsk/.cargo/bin/rust-analyzer',
        \	args: [],
        \ initializationOptions: {'check': {'command': 'clippy'}},
        \	syncInit: v:true,
        \ }])

	noremap <silent> <Leader>a :LspCodeAction<CR>
	noremap <silent> <Leader>k :LspHover<CR>
	noremap <silent> <Leader>d :LspDiag show<CR>
	noremap <silent> <Leader>F :LspFormat<CR>
	noremap <silent> [d :LspDiag prevWrap<CR>
	noremap <silent> ]d :LspDiag nextWrap<CR>
	noremap <silent> gd :LspGotoDefinition<CR>
	noremap <silent> gi :LspGotoImpl<CR>
	noremap <silent> gr :LspShowReferences<CR>
else
	echoerr 'LSP not installed. Install yegappan/lsp to ' . s:lsp_plugin_dir
endif
